# email_system.py (v1.0 - The Imperial Herald)

import smtplib
import logging
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# --- рдХреЗрдиреНрджреНрд░реАрдп рдирд┐рдпрдиреНрддреНрд░рдг рдХрдХреНрд╖рдмрд╛рдЯ рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди рд▓реЛрдб рдЧрд░реНрдиреЗ ---
try:
    from config import EMAIL_CONFIG
except ImportError:
    print("FATAL: `config.py` not found. The Imperial Herald cannot speak.")
    EMAIL_CONFIG = {}

class EmailService:
    """
    рдЙрджреНрджреЗрд╢реНрдп #31-35: Omega Prime рдХреЛ рд▓рд╛рдЧрд┐ рдЗрдореЗрд▓ рдкрдард╛рдЙрдиреЗ рд╕реЗрд╡рд╛ред
    рдпреЛ "рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХ" рд╣реЛ рдЬрд╕рд▓реЗ AI рдХреЛ рдирд┐рд╖реНрдХрд░реНрд╖рд╣рд░реВ рд╕рдореНрд░рд╛рдЯрд▓рд╛рдИ рдкрдард╛рдЙрдБрдЫред
    """
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(EmailService, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        # Singleton Pattern: __init__ рдПрдХ рдкрдЯрдХ рдорд╛рддреНрд░ рдЪрд▓реНрдЫ
        if hasattr(self, '_initialized'):
            return
        self._initialized = True
        
        self.logger = logging.getLogger(self.__class__.__name__)
        self.config = EMAIL_CONFIG
        
        # рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди рдЬрд╛рдБрдЪ
        if not all([self.config.get('smtp_server'), self.config.get('smtp_port'), 
                    self.config.get('username'), self.config.get('password')]):
            self.logger.critical("рдЗрдореЗрд▓ рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди рдЕрдкреВрд░реНрдг рдЫред рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХ рдореМрди рдЫред")
            self.is_configured = False
        else:
            self.is_configured = True
            self.logger.info("рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХ (v1.0) рдЕрдирд▓рд╛рдЗрди рдЖрдпреЛ рд░ рдЖрджреЗрд╢ рдкрдард╛рдЙрди рддрдпрд╛рд░ рдЫред")

    def send_html_email(self, recipient, subject, html_body):
        """
        рдПрдЙрдЯрд╛ HTML рдЗрдореЗрд▓ рдкрдард╛рдЙрдиреЗ рдореБрдЦреНрдп рдкреНрд░рдХрд╛рд░реНрдпред
        :param recipient: рдкреНрд░рд╛рдкреНрддрдХрд░реНрддрд╛рдХреЛ рдЗрдореЗрд▓ рдареЗрдЧрд╛рдирд╛ред
        :param subject: рдЗрдореЗрд▓рдХреЛ рд╡рд┐рд╖рдпред
        :param html_body: рдЗрдореЗрд▓рдХреЛ HTML рд╕рд╛рдордЧреНрд░реАред
        :return: bool: True рдпрджрд┐ рд╕рдлрд▓ рднрдпреЛ, рдЕрдиреНрдпрдерд╛ Falseред
        """
        if not self.is_configured:
            self.logger.error("рдЗрдореЗрд▓ рдкрдард╛рдЙрди рд╕рдХрд┐рдПрди рдХрд┐рдирднрдиреЗ рдкреНрд░рдгрд╛рд▓реА рдХрдиреНрдлрд┐рдЧрд░ рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред")
            return False

        msg = MIMEMultipart('alternative')
        msg['From'] = self.config['username']
        msg['To'] = recipient
        msg['Subject'] = subject

        # HTML рд╕рд╛рдордЧреНрд░реА рд╕рдВрд▓рдЧреНрди рдЧрд░реНрдиреЗ
        msg.attach(MIMEText(html_body, 'html'))

        try:
            self.logger.info(f"'{subject}' рд╡рд┐рд╖рдпрдХреЛ рд╕рд╛рде '{recipient}' рд▓рд╛рдИ рд╢рд╛рд╣реА рдЖрджреЗрд╢ рдкрдард╛рдЙрдБрджреИ...")
            # Gmail SMTP рд╕рд░реНрднрд░рд╕рдБрдЧ рд╕реБрд░рдХреНрд╖рд┐рдд рдЬрдбрд╛рди рд╕реНрдерд╛рдкрдирд╛ рдЧрд░реНрдиреЗ
            with smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port']) as server:
                server.starttls()  # рдЬрдбрд╛рди рд╕реБрд░рдХреНрд╖рд┐рдд рдЧрд░реНрдиреЗ
                server.login(self.config['username'], self.config['password'])
                server.send_message(msg)
            self.logger.info("рдЖрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрдард╛рдЗрдпреЛред")
            return True
        except smtplib.SMTPAuthenticationError:
            self.logger.critical("FATAL: SMTP рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдЕрд╕рдлрд▓ рднрдпреЛ! `omega_secrets.py` рдорд╛ SENDER_EMAIL/SENDER_PASSWORD рдЬрд╛рдБрдЪ рдЧрд░реНрдиреБрд╣реЛрд╕реНред 'Less secure app access' рд╡рд╛ 'App Password' рдЖрд╡рд╢реНрдпрдХ рд╣реБрди рд╕рдХреНрдЫред")
            return False
        except Exception as e:
            self.logger.error(f"рд╢рд╛рд╣реА рдЖрджреЗрд╢ рдкрдард╛рдЙрдБрджрд╛ рддреНрд░реБрдЯрд┐: {e}", exc_info=True)
            return False

# --- `main.py` рджреНрд╡рд╛рд░рд╛ рдкреНрд░рдпреЛрдЧ рдЧрд░рд┐рдиреЗ рдореБрдЦреНрдп рдкреНрд░рдХрд╛рд░реНрдп ---
def send_directive_email(subject, html_body):
    """
    `main.py` рдмрд╛рдЯ рд╕рдЬрд┐рд▓реИрд╕рдБрдЧ рдХрд▓ рдЧрд░реНрди рдорд┐рд▓реНрдиреЗ рдПрдХ рд╡рд┐рд╢реНрд╡рд╡реНрдпрд╛рдкреА рдкреНрд░рдХрд╛рд░реНрдпред
    рдпрд╕рд▓реЗ EmailService рдХреЛ рдПрдХрд▓ рдЙрджрд╛рд╣рд░рдг (singleton) рдкреНрд░рдпреЛрдЧ рдЧрд░реНрджрдЫред
    """
    herald = EmailService()
    recipient = herald.config.get('default_recipient', 'default@example.com')
    return herald.send_html_email(recipient, subject, html_body)

# --- рдЖрддреНрдо-рдкрд░реАрдХреНрд╖рдг рдмреНрд▓рдХ ---
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    herald = EmailService()
    if herald.is_configured:
        print("рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХрдХреЛ рдкрд░реАрдХреНрд╖рдг рдЪрд▓рд┐рд░рд╣реЗрдХреЛ рдЫ...")
        test_subject = "ЁЯЫбя╕П OMEGA PRIME HERALD TEST"
        test_body = """
        <html>
        <body>
            <h1>This is a test directive.</h1>
            <p>If you receive this, the Imperial Herald is functioning correctly.</p>
            <p style="color: green; font-weight: bold;">System Online.</p>
        </body>
        </html>
        """
        recipient_email = herald.config.get('default_recipient')
        if recipient_email:
            success = herald.send_html_email(recipient_email, test_subject, test_body)
            if success:
                print(f"рдкрд░реАрдХреНрд╖рдг рдЗрдореЗрд▓ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ '{recipient_email}' рдорд╛ рдкрдард╛рдЗрдпреЛред")
            else:
                print(f"рдкрд░реАрдХреНрд╖рдг рдЗрдореЗрд▓ рдкрдард╛рдЙрди рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рд▓рдЧрд╣рд░реВ рдЬрд╛рдБрдЪ рдЧрд░реНрдиреБрд╣реЛрд╕реНред")
        else:
            print("рддреНрд░реБрдЯрд┐: `config.py` рдорд╛ 'default_recipient' рд╕реЗрдЯ рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред")
    else:
        print("рдкрд░реАрдХреНрд╖рдг рд░рджреНрдж рдЧрд░рд┐рдпреЛ рдХрд┐рдирднрдиреЗ рдЗрдореЗрд▓ рдкреНрд░рдгрд╛рд▓реА рдХрдиреНрдлрд┐рдЧрд░ рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред")
