# history_builder.py (v1.4 - The Royal Army Mandate)

import logging
import time
import os
from datetime import datetime

from database_manager import get_db_connection, ensure_database_integrity
from data_sources_v1000 import WiseLibrarian

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s', handlers=[ logging.FileHandler("history_builder.log"), logging.StreamHandler() ])
logger = logging.getLogger("ImperialHistorian")

class SpecialistHistorian:
    def __init__(self):
        self.librarian = WiseLibrarian()
        self.librarian.governor_sleep_time = 4

    def build_history(self):
        logger.info("üëë ‡§∂‡§æ‡§π‡•Ä ‡§∏‡•á‡§®‡§æ‡§ï‡•ã ‡§Ü‡§¶‡•á‡§∂ (v1.4) ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡•§")
        conn = get_db_connection()
        if not conn: return
        try:
            cursor = conn.cursor()
            cursor.execute("CREATE TABLE IF NOT EXISTS historical_data (id INTEGER PRIMARY KEY, coin_id INTEGER NOT NULL, date TEXT NOT NULL, price REAL NOT NULL, UNIQUE(coin_id, date), FOREIGN KEY (coin_id) REFERENCES coins (id));")
            
            # --- ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: ‡§∂‡§æ‡§π‡•Ä ‡§∏‡•á‡§®‡§æ - ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡•®‡•¶‡•¶‡•¶ ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§¨‡§®‡§æ‡§â‡§®‡•á ---
            cursor.execute("SELECT id, coingecko_id, name FROM coins WHERE coingecko_id NOT LIKE 'unknown_%' AND market_cap > 0 ORDER BY market_cap DESC LIMIT 2000")
            target_coins = cursor.fetchall()

            if not target_coins:
                logger.warning("‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ó‡§∞‡•ç‡§®‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§°‡§æ‡§ü‡§æ‡§¨‡•á‡§∏‡§Æ‡§æ ‡§ï‡•Å‡§®‡•à ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®‡•§"); return

            total_coins = len(target_coins)
            logger.info(f"‡§ï‡•Å‡§≤ {total_coins} ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡•ß ‡§µ‡§∞‡•ç‡§∑‡§ï‡•ã ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§°‡§æ‡§ü‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§Å‡§¶‡•à‡§õ...")

            for index, coin in enumerate(target_coins):
                try:
                    coin_db_id = coin['id']; coingecko_id = coin['coingecko_id']; coin_name = coin['name']
                    
                    # ‡§Ø‡§¶‡§ø ‡§Ø‡•ã ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§ï‡•ã ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§™‡§π‡§ø‡§≤‡•á ‡§®‡•à ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§õ ‡§≠‡§®‡•á, ‡§§‡•ç‡§Ø‡§∏‡§≤‡§æ‡§à ‡§õ‡•ã‡§°‡•ç‡§®‡•á
                    cursor.execute("SELECT COUNT(id) FROM historical_data WHERE coin_id = ?", (coin_db_id,))
                    if cursor.fetchone()[0] > 360:
                        logger.debug(f"'{coin_name}' ‡§ï‡•ã ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§™‡§π‡§ø‡§≤‡•á ‡§®‡•à ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§õ, ‡§õ‡•ã‡§°‡§ø‡§Å‡§¶‡•à‡§õ‡•§")
                        continue

                    logger.info(f"[{index + 1}/{total_coins}] ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ '{coin_name}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
                    
                    params = {'vs_currency': 'usd', 'days': '365', 'interval': 'daily'}
                    history_data = self.librarian._fetch_with_governor(f"https://api.coingecko.com/api/v3/coins/{coingecko_id}/market_chart", params=params)

                    if history_data and 'prices' in history_data:
                        for price_point in history_data['prices']:
                            date_str = datetime.fromtimestamp(price_point[0] / 1000).strftime('%Y-%m-%d')
                            cursor.execute("INSERT OR IGNORE INTO historical_data (coin_id, date, price) VALUES (?, ?, ?)", (coin_db_id, date_str, price_point[1]))
                    else:
                        logger.warning(f"'{coin_name}' ({coingecko_id}) ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§ï‡•Å‡§®‡•à ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§°‡§æ‡§ü‡§æ ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®‡•§")
                except Exception as e:
                    logger.error(f"'{coin.get('name', 'Unknown')}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§°‡§æ‡§ü‡§æ ‡§≤‡•ç‡§Ø‡§æ‡§â‡§® ‡§Ö‡§∏‡§´‡§≤‡•§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}."); continue
            
            conn.commit()
            logger.info("‚úÖ‚úÖ‚úÖ ‡§∂‡§æ‡§π‡•Ä ‡§∏‡•á‡§®‡§æ‡§ï‡•ã ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§® ‡§∏‡§Æ‡•ç‡§™‡§®‡•ç‡§® ‡§≠‡§Ø‡•ã!")
            logger.info("‡§Ö‡§¨ ‡•´ ‡§Æ‡§ø‡§®‡•á‡§ü‡§Æ‡§æ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§¨‡§®‡•ç‡§¶ ‡§π‡•Å‡§®‡•á‡§õ‡•§")
            os.system("sudo shutdown +5")
        except Exception as e:
            logger.critical(f"‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§°‡§æ‡§ü‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£‡§Æ‡§æ ‡§ó‡§Æ‡•ç‡§≠‡•Ä‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§≠‡§Ø‡•ã: {e}", exc_info=True)
        finally:
            conn.close()

if __name__ == "__main__":
    ensure_database_integrity()
    historian = SpecialistHistorian()
    historian.build_history()
