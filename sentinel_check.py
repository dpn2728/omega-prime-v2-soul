# sentinel_check.py (v1.0 - The Imperial Sentinel's Diagnostic)

import requests
import logging
from datetime import datetime, timedelta

# --- рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХрд╛ рд╕рдореНрдмрдиреНрдзрд┐рдд рдЕрдВрдЧрд╣рд░реВрдмрд╛рдЯ рдЬрд╛рдирдХрд╛рд░реА рддрд╛рдиреНрдиреЗ ---
try:
    from config import API_KEYS
    # NOTE: We are importing the hunter's file itself to read its static variable
    from pre_cognitive_hunter import WATCHLIST_WALLETS
except Exception as e:
    print(f"FATAL: рдЖрд╡рд╢реНрдпрдХ рдлрд╛рдЗрд▓рд╣рд░реВ (config.py, pre_cognitive_hunter.py) рднреЗрдЯреНрдЯрд╛рдЙрди рд╕рдХрд┐рдПрди: {e}")
    exit()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s')
logger = logging.getLogger("ImperialSentinel")

def run_diagnostics():
    """
    рдпреЛ рдкреНрд░реЛрдЯреЛрдХрд▓рд▓реЗ рд╣рд╛рдореНрд░реЛ рд╢рд┐рдХрд╛рд░реАрдХреЛ рдЖрдБрдЦрд╛ (API Key) рд░ рд╢рд┐рдХрд╛рд░ рд╕реНрдерд▓ (Wallet) рдХреЛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдБрдЪ рдЧрд░реНрдЫред
    """
    logger.info("="*50)
    logger.info("ЁЯСС рдЕрдХрд╛рдЯреНрдп рдирд┐рджрд╛рди рдкреНрд░реЛрдЯреЛрдХрд▓ (v1.0) рд╕реБрд░реБ рд╣реБрдБрджреИрдЫ...")
    logger.info("="*50)

    # --- рез. рд╢рд╛рд╣реА рдЫрд╛рдкрдХреЛ рдкрд░реАрдХреНрд╖рдг (API Key Verification) ---
    etherscan_key = API_KEYS.get("onchain_scanners", {}).get("ethereum")
    if not etherscan_key or "YOUR_" in etherscan_key:
        logger.error("ЁЯЫС рдирд┐рджрд╛рди рдЕрд╕рдлрд▓: `omega_secrets.py` рдорд╛ ETHERSCAN_API_KEY рд╕реЗрдЯ рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред")
        return

    logger.info(f"ЁЯФС рд╢рд╛рд╣реА рдЫрд╛рдк (API Key) рдХреЛ рдкрд░реАрдХреНрд╖рдг рдЧрд░реНрджреИ: ...{etherscan_key[-4:]}")
    test_url = f"https://api.etherscan.io/api?module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey={etherscan_key}"
    
    try:
        response = requests.get(test_url)
        response.raise_for_status()
        data = response.json()
        if data.get("status") == "1":
            logger.info("тЬЕ рдирд┐рджрд╛рди рд╕рдлрд▓: рд╢рд╛рд╣реА рдЫрд╛рдк (API Key) рдорд╛рдиреНрдп рдЫ рд░ Etherscan рд▓реЗ рд╕реНрд╡реАрдХрд╛рд░ рдЧрд░реНрдпреЛред")
        else:
            logger.error(f"ЁЯЫС рдирд┐рджрд╛рди рдЕрд╕рдлрд▓: Etherscan рд▓реЗ рд╢рд╛рд╣реА рдЫрд╛рдкрд▓рд╛рдИ рдЕрд╕реНрд╡реАрдХрд╛рд░ рдЧрд░реНрдпреЛред рд╕рдиреНрджреЗрд╢: {data.get('message')}")
            return
    except Exception as e:
        logger.error(f"ЁЯЫС рдирд┐рджрд╛рди рдЕрд╕рдлрд▓: Etherscan рд╕рдБрдЧ рдЬрдбрд╛рди рд╣реБрди рд╕рдХреЗрдиред рддреНрд░реБрдЯрд┐: {e}")
        return

    # --- реи. рд╢рд┐рдХрд╛рд░ рд╕реНрдерд▓рдХреЛ рдкрд░реАрдХреНрд╖рдг (Wallet Activity Verification) ---
    if not WATCHLIST_WALLETS.get("ethereum"):
        logger.error("ЁЯЫС рдирд┐рджрд╛рди рдЕрд╕рдлрд▓: `pre_cognitive_hunter.py` рдорд╛ рдХреБрдиреИ рдкрдирд┐ Ethereum рд╡рд╛рд▓реЗрдЯ рдареЗрдЧрд╛рдирд╛ рдлреЗрд▓рд╛ рдкрд░реЗрдиред")
        return

    for wallet_name, address in WATCHLIST_WALLETS["ethereum"].items():
        logger.info("-" * 50)
        logger.info(f"ЁЯОп рд╢рд┐рдХрд╛рд░ рд╕реНрдерд▓рдХреЛ рдкрд░реАрдХреНрд╖рдг рдЧрд░реНрджреИ: {wallet_name} ({address})")

        # реи(a). ERC-20 рдЯреЛрдХрди рдЧрддрд┐рд╡рд┐рдзрд┐
        tokentx_url = f"https://api.etherscan.io/api?module=account&action=tokentx&address={address}&startblock=0&endblock=99999999&sort=desc&apikey={etherscan_key}"
        # реи(b). рд╕рд╛рдорд╛рдиреНрдп ETH рдЧрддрд┐рд╡рд┐рдзрд┐
        txlist_url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=desc&apikey={etherscan_key}"

        try:
            tokentx_data = requests.get(tokentx_url).json()
            txlist_data = requests.get(txlist_url).json()

            if isinstance(tokentx_data.get("result"), list):
                logger.info(f"    - ERC-20 рдЯреЛрдХрди рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг (рд╣рд╛рдореНрд░реЛ рд╣рд╛рд▓рдХреЛ рд╡рд┐рдзрд┐): {len(tokentx_data['result'])} рд▓реЗрдирджреЗрдирд╣рд░реВ рдлреЗрд▓рд╛ рдкрд░реЗред")
            else:
                logger.warning(f"    - ERC-20 рдЯреЛрдХрди рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг: Etherscan рдмрд╛рдЯ рдЪреЗрддрд╛рд╡рдиреА - {tokentx_data.get('message')}")

            if isinstance(txlist_data.get("result"), list):
                logger.info(f"    - рд╕рд╛рдорд╛рдиреНрдп ETH рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг (рднрд╡рд┐рд╖реНрдпрдХреЛ рд╡рд┐рдзрд┐): {len(txlist_data['result'])} рд▓реЗрдирджреЗрдирд╣рд░реВ рдлреЗрд▓рд╛ рдкрд░реЗред")
            else:
                logger.warning(f"    - рд╕рд╛рдорд╛рдиреНрдп ETH рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг: Etherscan рдмрд╛рдЯ рдЪреЗрддрд╛рд╡рдиреА - {txlist_data.get('message')}")

        except Exception as e:
            logger.error(f"    - {wallet_name} рдХреЛ рд▓рд╛рдЧрд┐ рдЧрддрд┐рд╡рд┐рдзрд┐ рдЬрд╛рдБрдЪ рдЧрд░реНрди рдЕрд╕рдлрд▓ред рддреНрд░реБрдЯрд┐: {e}")

    logger.info("=" * 50)
    logger.info("ЁЯСС рдирд┐рджрд╛рди рдкреНрд░реЛрдЯреЛрдХрд▓ рд╕рдореНрдкрдиреНрди рднрдпреЛред")
    logger.info("=" * 50)

if __name__ == "__main__":
    run_diagnostics()
