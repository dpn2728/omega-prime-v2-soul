# main.py (v5.0 - The Omega Prime "Emperor's Hand" - FINAL AUTONOMOUS CORE)

import logging
import time
import sys
import os
import json
from datetime import datetime, timedelta

# --- OMEGA PRIME'S LIVING ORGANS (‡§∏‡§¨‡•à ‡§Æ‡•ã‡§°‡•ç‡§Ø‡•Å‡§≤‡§π‡§∞‡•Ç ‡§Ü‡§Ø‡§æ‡§§ ‡§ó‡§∞‡•ç‡§®‡•á) ---
try:
    from config import is_configured_correctly, get_logger_config, EXECUTION_CONFIG
    from system_monitor import SystemMonitor
    from update_system import UpdateManager, restart_application
    from data_sources import scan_universe_and_analyze
    from tri_mind import run_tri_mind_consensus_for_batch
    import email_templates
    from email_system import send_directive_email
    from execution_engine import ExecutionEngine # <-- ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§ (The Emperor's Hand)
except ImportError as e:
    print(f"FATAL ERROR: A core module is missing: {e}. Please ensure all .py files are present.")
    sys.exit(1)

# --- ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§ï‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∏‡§® ---
MAIN_LOOP_INTERVAL_SECONDS = 28800  # 8 hours
ERROR_RESTART_DELAY_SECONDS = 300   # 5 minutes
DIRECTIVE_LOG_FILE = "sent_directives.log"

# --- ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§π‡•á‡§≤‡•ç‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§π‡§∞‡•Ç ( ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ) ---
def has_been_sent_recently(symbol, log_file=DIRECTIVE_LOG_FILE, hours=24):
    if not os.path.exists(log_file): return False
    now = datetime.now()
    try:
        with open(log_file, 'r') as f:
            for line in f:
                try:
                    data = json.loads(line)
                    if data.get('symbol') == symbol:
                        log_time = datetime.fromisoformat(data.get('timestamp'))
                        if (now - log_time) < timedelta(hours=hours):
                            return True
                except (json.JSONDecodeError, KeyError, TypeError): continue
    except Exception as e:
        logging.error(f"‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§≤‡§ó ‡§´‡§æ‡§á‡§≤ ‡§™‡§¢‡•ç‡§¶‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
    return False

def log_sent_directive(symbol, trade_info, log_file=DIRECTIVE_LOG_FILE):
    log_entry = {
        'symbol': symbol, 
        'timestamp': datetime.now().isoformat(),
        'trade_info': trade_info
    }
    try:
        with open(log_file, 'a') as f:
            f.write(json.dumps(log_entry) + '\n')
    except Exception as e:
        logging.error(f"‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§≤‡§ó ‡§´‡§æ‡§á‡§≤‡§Æ‡§æ ‡§≤‡•á‡§ñ‡•ç‡§¶‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")

# --- ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§π‡§∞‡•Ç ( ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ) ---
def setup_advanced_logging():
    log_config = get_logger_config()
    logger = logging.getLogger()
    logger.setLevel(log_config['level'])
    if logger.hasHandlers(): logger.handlers.clear()
    formatter = logging.Formatter(log_config['format'])
    # ... (rest of the logging setup is unchanged) ...
    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(formatter)
    logger.addHandler(stream_handler)
    file_handler = logging.FileHandler(log_config['log_file'])
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    error_file_handler = logging.FileHandler(log_config['error_log_file'])
    error_file_handler.setLevel(logging.ERROR)
    error_file_handler.setFormatter(formatter)
    logger.addHandler(error_file_handler)
    logging.info("="*60 + "\n‡§â‡§®‡•ç‡§®‡§§ ‡§≤‡§ó‡§ø‡§ô ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•ç‡§´‡§ø‡§ó‡§∞ ‡§≠‡§Ø‡•ã‡•§\n" + "="*60)

def check_for_updates():
    logging.info("‡§Ö‡§Æ‡§∞ ‡§´‡§ø‡§®‡§ø‡§ï‡•ç‡§∏ ‡§á‡§®‡•ç‡§ú‡§ø‡§® ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø: ‡§Ö‡§™‡§°‡•á‡§ü‡§π‡§∞‡•Ç‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§¶‡•à...")
    updater = UpdateManager()
    if updater.run_update_cycle():
        logging.info("‡§Ö‡§™‡§°‡•á‡§ü ‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã‡•§ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§ï‡•ã ‡§®‡§Ø‡§æ‡§Å ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§® ‡§™‡•Å‡§®‡§É ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§Å‡§¶‡•à‡§õ...")
        restart_application()
    else:
        logging.info("‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§™‡§π‡§ø‡§≤‡•á ‡§®‡•à ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£‡§Æ‡§æ ‡§õ‡•§")

# --- v5.0 FINAL: The Main Autonomous Engine ---
def main():
    logging.info("üëë OMEGA PRIME ENGINE v5.0 - ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§ (‡§∏‡•ç‡§µ‡§æ‡§Ø‡§§‡•ç‡§§ ‡§ï‡•ã‡§∞) ‡§∏‡•Å‡§∞‡•Å ‡§≠‡§Ø‡•ã üëë")
    system_monitor = SystemMonitor()
    system_monitor.start()

    # --- ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§‡§≤‡§æ‡§à ‡§∏‡§∂‡§∏‡•ç‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§â‡§®‡•á ---
    execution_engine = ExecutionEngine(
        exchange_id=EXECUTION_CONFIG['default_exchange'],
        simulation_mode=EXECUTION_CONFIG['simulation_mode']
    )

    while True:
        try:
            check_for_updates()
            logging.info(f"--- ‡§®‡§Ø‡§æ‡§Å ‡§∏‡•ç‡§ï‡•ç‡§Ø‡§æ‡§® ‡§ö‡§ï‡•ç‡§∞ ‡§∏‡•Å‡§∞‡•Å ‡§≠‡§Ø‡•ã: {time.strftime('%Y-%m-%d %H:%M:%S')} ---")
            system_monitor.update_heartbeat()

            analyzed_coins = scan_universe_and_analyze()
            approved_candidates = run_tri_mind_consensus_for_batch(analyzed_coins if analyzed_coins else [])
            
            if approved_candidates:
                best_candidate_symbol = approved_candidates[0]['symbol']
                if has_been_sent_recently(best_candidate_symbol):
                    logging.info(f"‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä: {best_candidate_symbol} ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§™‡§π‡§ø‡§≤‡•á ‡§®‡•à ‡§°‡§æ‡§á‡§∞‡•á‡§ï‡•ç‡§ü‡§ø‡§≠ ‡§™‡§†‡§æ‡§á‡§è‡§ï‡•ã ‡§õ‡•§")
                else:
                    best_candidate_data = next((c for c in analyzed_coins if c['symbol'] == best_candidate_symbol), None)
                    if best_candidate_data:
                        logging.info(f"üî•üî•üî• ‡§ú‡•á‡§®‡•á‡§∏‡§ø‡§∏ ‡§â‡§Æ‡•ç‡§Æ‡•á‡§¶‡§µ‡§æ‡§∞ ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•ç‡§Ø‡•ã: {best_candidate_data['name']} ({best_candidate_symbol}) üî•üî•üî•")
                        
                        # <<< --- ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§ (THE EMPEROR'S HAND) IN ACTION --- >>>
                        logging.info(f"‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø: {best_candidate_symbol} ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§ü‡•ç‡§∞‡•á‡§° ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§ó‡§∞‡•ç‡§®‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§¶‡•à...")
                        trade_result = execution_engine.execute_buy_order(
                            symbol=best_candidate_symbol,
                            usdt_amount=EXECUTION_CONFIG['trade_amount_usdt']
                        )
                        # <<< --- ACTION COMPLETE --- >>>

                        if trade_result:
                            logging.info(f"‡§ü‡•ç‡§∞‡•á‡§° ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§∏‡§´‡§≤ (Order ID: {trade_result.get('id')})‡•§ ‡§ú‡•á‡§®‡•á‡§∏‡§ø‡§∏ ‡§°‡§æ‡§á‡§∞‡•á‡§ï‡•ç‡§ü‡§ø‡§≠ ‡§™‡§†‡§æ‡§â‡§Å‡§¶‡•à...")
                            subject, html_body = email_templates.generate_genesis_directive(best_candidate_data, {'prophet': True, 'strategist': True, 'guardian': True})
                            if send_directive_email(subject, html_body):
                                log_sent_directive(best_candidate_symbol, trade_result)
                        else:
                            logging.error(f"‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§π‡§æ‡§§: {best_candidate_symbol} ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§ü‡•ç‡§∞‡•á‡§° ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤‡•§ ‡§°‡§æ‡§á‡§∞‡•á‡§ï‡•ç‡§ü‡§ø‡§≠ ‡§∞‡§¶‡•ç‡§¶ ‡§ó‡§∞‡§ø‡§Ø‡•ã‡•§")
            else:
                logging.info("üåô ‡§ï‡•Å‡§®‡•à ‡§â‡§ö‡•ç‡§ö-‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ‡§ï‡•ã ‡§Ö‡§µ‡§∏‡§∞ ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®‡•§ ‡§π‡•ã‡§≤‡•ç‡§° ‡§°‡§æ‡§á‡§∞‡•á‡§ï‡•ç‡§ü‡§ø‡§≠ ‡§™‡§†‡§æ‡§â‡§Å‡§¶‡•à‡•§")
                market_data = {'state': 'Low Opportunity', 'action': 'Preserve capital.'}
                next_scan_hours = MAIN_LOOP_INTERVAL_SECONDS // 3600
                subject, html_body = email_templates.generate_hold_directive(market_data, next_scan_hours)
                send_directive_email(subject, html_body)

            logging.info(f"--- ‡§∏‡•ç‡§ï‡•ç‡§Ø‡§æ‡§® ‡§ö‡§ï‡•ç‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•Ç‡§∞‡§æ ‡§≠‡§Ø‡•ã ---")
            logging.info(f"{MAIN_LOOP_INTERVAL_SECONDS // 3600} ‡§ò‡§£‡•ç‡§ü‡§æ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§®‡§ø‡§¶‡•ç‡§∞‡§æ‡§Æ‡§æ ‡§ú‡§æ‡§Å‡§¶‡•à...")
            time.sleep(MAIN_LOOP_INTERVAL_SECONDS)

        except KeyboardInterrupt:
            logging.info("‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§Ü‡§¶‡•á‡§∂‡§Æ‡§æ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§¨‡§®‡•ç‡§¶ ‡§ó‡§∞‡§ø‡§Å‡§¶‡•à‡§õ‡•§")
            system_monitor.stop()
            break
        except Exception as e:
            logging.critical(f"‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡•Ç‡§™‡§Æ‡§æ ‡§è‡§ï ‡§ó‡§Æ‡•ç‡§≠‡•Ä‡§∞, ‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§≠‡§Ø‡•ã: {e}", exc_info=True)
            logging.info(f"{ERROR_RESTART_DELAY_SECONDS} ‡§∏‡•á‡§ï‡•á‡§®‡•ç‡§° ‡§™‡§õ‡§ø ‡§™‡•Å‡§®‡§É ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§®‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§¶‡•à...")
            time.sleep(ERROR_RESTART_DELAY_SECONDS)

if __name__ == "__main__":
    setup_advanced_logging()
    if not is_configured_correctly():
        logging.critical("‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§® ‡§∏‡§ï‡•á‡§®‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ `config.py` ‡§∞ `omega_secrets.py` ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§")
        sys.exit(1)
    main()
