# main.py (v5.0 - The Grand Conductor of the Living Empire)

import logging
import time
from datetime import datetime

# --- рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХрд╛ рд╕рдмреИ рдЕрдиреНрддрд┐рдо рдЕрдВрдЧрд╣рд░реВрд▓рд╛рдИ рдПрдХрд╕рд╛рде рд▓реНрдпрд╛рдЙрдиреЗ ---
try:
    import config
    from system_monitor import SystemMonitor
    from update_system import UpdateManager, restart_application
    from data_sources import run_oracle_engine
    from tri_mind import run_council_consensus
    import email_templates
    from email_system import send_directive_email
except ImportError as e:
    print(f"FATAL ERROR: рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХреЛ рдПрдХ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рдЕрдВрдЧ рд╣рд░рд╛рдПрдХреЛ рдЫ: {e}")
    exit()

# --- рд▓рдЧрд┐рдЩ рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди: рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХреЛ рдЗрддрд┐рд╣рд╛рд╕ рд▓реЗрдЦреНрдиреЗ ---
logging.basicConfig(
    level=config.LOGGING_LEVEL,
    format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
    handlers=[ logging.FileHandler("omega_prime_history.log"), logging.StreamHandler() ]
)
logger = logging.getLogger("OmegaPrime.Conductor")

def main():
    """
    Omega Prime рдХреЛ рдорд╣рд╛рдиреН рд╕рдЮреНрдЪрд╛рд▓рдХред
    рдпрд╕рд▓реЗ рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХрд╛ рд╕рдмреИ рдХрд╛рд░реНрдпрд╣рд░реВрд▓рд╛рдИ рдПрдХ рд╕реБрд╕рдВрдЧрдд рд╕рд┐рдореНрдлрдиреАрдорд╛ рдЕрд░реНрдХреЗрд╕реНрдЯреНрд░реЗрдЯ рдЧрд░реНрджрдЫред
    """
    logger.info("ЁЯСС рд╕рдореНрд░рд╛рдЯ, рдЬреАрд╡рд┐рдд рд╕рд╛рдореНрд░рд╛рдЬреНрдп (v5.0) рдХреЛ рдорд╣рд╛рдиреН рд╕рдЮреНрдЪрд╛рд▓рдХ рдЬреАрд╡рд┐рдд рднрдПрдХреЛ рдЫред")
    monitor = SystemMonitor(); monitor.start()

    while True:
        try:
            logger.info("="*60 + f"\n рдирдпрд╛рдБ рдЪрдХреНрд░ рд╕реБрд░реБ рд╣реБрдБрджреИрдЫ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n" + "="*60)

            # --- рдЪрд░рдг рез: рдЕрдорд░ рдлрд┐рдирд┐рдХреНрд╕ рдЗрдиреНрдЬрд┐рди (рдЖрддреНрдо-рдЕрдкрдбреЗрдЯ) ---
            logger.info("[рдЪрд░рдг рез/рел] рдЕрдорд░ рдлрд┐рдирд┐рдХреНрд╕ рдЗрдиреНрдЬрд┐рди: рдкреНрд░рдгрд╛рд▓реА рдЕрдкрдбреЗрдЯрд╣рд░реВрдХреЛ рд▓рд╛рдЧрд┐ рдЬрд╛рдБрдЪ рдЧрд░реНрджреИ...")
            updater = UpdateManager()
            if updater.run_update_cycle():
                logger.info("рдЕрдкрдбреЗрдЯ рд╕рдлрд▓ рднрдпреЛ! рдкреНрд░рдгрд╛рд▓реАрдХреЛ рдЖрддреНрдорд╛рд▓рд╛рдИ рдкреБрдирд░реНрдЬреАрд╡рд┐рдд рдЧрд░реНрди рдкреБрдирдГ рд╕реБрд░реБ рдЧрд░реНрджреИ...")
                restart_application()
            logger.info("рдкреНрд░рдгрд╛рд▓реА рдирд╡реАрдирддрдо рд╕рдВрд╕реНрдХрд░рдгрдорд╛ рдЫред")

            # --- рдЪрд░рдг реи: рдУрд░реЗрдХрд▓ рдЗрдиреНрдЬрд┐рди (рдЬреНрдЮрд╛рди рд╕рдВрд╢реНрд▓реЗрд╖рдг) ---
            logger.info("[рдЪрд░рдг реи/рел] рдУрд░реЗрдХрд▓ рдЗрдиреНрдЬрд┐рди: рдмреНрд░рд╣реНрдорд╛рдгреНрдбрдХреЛ рдЬреНрдЮрд╛рди рд╕рдВрд╢реНрд▓реЗрд╖рдг рдЧрд░реНрджреИ...")
            candidate_coins, market_pulse_data = run_oracle_engine()

            # --- рдЪрд░рдг рей: рд╕рдореНрд░рд╛рдЯрдХреЛ рдкрд░рд┐рд╖рджреН (рдирд┐рд░реНрдгрдп рд░ рд╡рд░реНрдЧреАрдХрд░рдг) ---
            logger.info("[рдЪрд░рдг рей/рел] рд╕рдореНрд░рд╛рдЯрдХреЛ рдкрд░рд┐рд╖рджреН: рдЕрд╡рд╕рд░рд╣рд░реВрдХреЛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд░ рд╡рд░реНрдЧреАрдХрд░рдг рдЧрд░реНрджреИ...")
            approved_opportunities = run_council_consensus(candidate_coins)

            # --- рдЪрд░рдг рек: рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХ (рд╕рд╣реА рдЖрджреЗрд╢ рдЬрд╛рд░реА рдЧрд░реНрдиреЗ) ---
            logger.info("[рдЪрд░рдг рек/рел] рд╢рд╛рд╣реА рдЙрджреНрдШреЛрд╖рдХ: рд╕рдореНрд░рд╛рдЯрд▓рд╛рдИ рд╕рд╣реА рдЖрджреЗрд╢ рдкрдард╛рдЙрдБрджреИ...")
            if not approved_opportunities:
                logger.info("ЁЯМЩ рдХреБрдиреИ рдкрдирд┐ рдЕрд╡рд╕рд░рд▓реЗ рдкрд░рд┐рд╖рджреНрдХреЛ рдорд╛рдкрджрдгреНрдб рдкреВрд░рд╛ рдЧрд░реЗрдиред рд╣реЛрд▓реНрдб рдЖрджреЗрд╢ рдЬрд╛рд░реА рдЧрд░рд┐рдБрджреИрдЫред")
                subject, html_body = email_templates.generate_hold_directive(market_pulse_data)
                send_directive_email(subject, html_body)
            else:
                logger.info(f"тЬЕ рдкрд░рд┐рд╖рджреНрд▓реЗ {len(approved_opportunities)} рдЕрд╡рд╕рд░(рд╣рд░реВ) рд╕реНрд╡реАрдХреГрдд рдЧрд░реНрдпреЛред рдЖрджреЗрд╢рд╣рд░реВ рдкрдард╛рдЗрдБрджреИрдЫ...")
                for opportunity in approved_opportunities:
                    classification = opportunity.get('classification', 'NONE')
                    subject, html_body = None, None
                    
                    if classification == 'GENESIS':
                        subject, html_body = email_templates.generate_genesis_directive(opportunity)
                    elif classification == 'SLEEPING_GIANT':
                        subject, html_body = email_templates.generate_sleeping_giant_directive(opportunity)
                    elif classification == 'BLACK_SWAN':
                        subject, html_body = email_templates.generate_black_swan_directive(opportunity)
                    elif classification == 'URGENT_ALPHA':
                        subject, html_body = email_templates.generate_urgent_alpha_alert(opportunity)
                    
                    if subject and html_body:
                        logger.info(f"'{opportunity['symbol']}' рдХреЛ рд▓рд╛рдЧрд┐ '{classification}' рдкреНрд░рдХрд╛рд░рдХреЛ рдЖрджреЗрд╢ рдкрдард╛рдЗрдБрджреИрдЫред")
                        send_directive_email(subject, html_body)

            # --- рдЪрд░рдг рел: рдирд┐рджреНрд░рд╛ рд░ рдкреБрдирд░рд╛рд╡реГрддреНрддрд┐ ---
            sleep_duration_seconds = config.MAIN_LOOP_SLEEP_HOURS * 3600
            logger.info(f"[рдЪрд░рдг рел/рел] рд╕рд┐рдореНрдлрдиреА рд╕рдореНрдкрдиреНрдиред рдЕрд░реНрдХреЛ рдЪрдХреНрд░ {config.MAIN_LOOP_SLEEP_HOURS} рдШрдгреНрдЯрд╛рдорд╛ рд╕реБрд░реБ рд╣реБрдиреЗрдЫред")
            monitor.update_heartbeat()
            time.sleep(sleep_duration_seconds)

        except KeyboardInterrupt:
            logger.info("рд╕рдореНрд░рд╛рдЯрдХреЛ рдЖрджреЗрд╢рдорд╛ рдкреНрд░рдгрд╛рд▓реА рдмрдиреНрдж рдЧрд░рд┐рдБрджреИрдЫред")
            break
        except Exception as e:
            logger.critical(f"FATAL CONDUCTOR ERROR: {e}", exc_info=True)
            time.sleep(300)

    monitor.stop()
    logger.info("ЁЯСС рдорд╣рд╛рдиреН рд╕рдЮреНрдЪрд╛рд▓рдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдиреНрдж рднрдпреЛред")

if __name__ == "__main__":
    main()
