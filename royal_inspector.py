# royal_inspector.py (v1.5 - The Inspector Speaks)
import logging
import time

# --- рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХрд╛ рд╕рдмреИ рдЕрдВрдЧрд╣рд░реВрд▓рд╛рдИ рдирд┐рд░реАрдХреНрд╖рдгрдХреЛ рд▓рд╛рдЧрд┐ рдмреЛрд▓рд╛рдЙрдиреЗ ---
import config
from database_manager import get_db_connection
from intelligence_aggregator import IntelligenceAggregator
from pre_cognitive_hunter import PreCognitiveHunter

# рд╣рд╛рдореА рдпрд╣рд╛рдБ рд▓рдЧрд┐рдЩрд▓рд╛рдИ рд╢рд╛рдиреНрдд рд░рд╛рдЦреНрдЫреМрдВ рддрд╛рдХрд┐ рд╣рд╛рдореНрд░реЛ рд░рд┐рдкреЛрд░реНрдЯ рд╕рдлрд╛ рджреЗрдЦрд┐рдпреЛрд╕реН
logging.basicConfig(level=logging.WARNING, format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s')

def run_inspection():
    """
    рдпреЛ рд╢рд╛рд╣реА рдирд┐рд░реАрдХреНрд╖рдХ рд╣реЛред рдпрд╕рд▓реЗ рдЧрдб-рдореЗрд╕рд┐рдирдХреЛ рдорд╕реНрддрд┐рд╖реНрдХрдХреЛ рд╣рд░реЗрдХ рдирд┐рд░реНрдгрдпрдХреЛ
    рд╡рд┐рд╕реНрддреГрдд рд░ рдЕрдХрд╛рдЯреНрдп рд░рд┐рдкреЛрд░реНрдЯ рдкреНрд░рд╕реНрддреБрдд рдЧрд░реНрдЫред
    """
    print("\n" + "="*80)
    print("ЁЯСС рд╢рд╛рд╣реА рдирд┐рд░реАрдХреНрд╖рдг рдкреНрд░реЛрдЯреЛрдХрд▓ (v1.5) рд╕рдХреНрд░рд┐рдпред рд╕рддреНрдпрдХреЛ рдРрдирд╛ рд╕рдХреНрд░рд┐рдп рдЧрд░рд┐рдБрджреИрдЫ...")
    print("="*80 + "\n")

    conn = get_db_connection()
    if not conn:
        print("ЁЯФ┤ FATAL: рд╕рд╛рдореНрд░рд╛рдЬреНрдпрдХреЛ рдорд╕реНрддрд┐рд╖реНрдХ (рдбрд╛рдЯрд╛рдмреЗрд╕) рд╕рдБрдЧ рдЬрдбрд╛рди рд╣реБрди рд╕рдХреЗрдиред")
        return

    print("ЁЯФН рдЪрд░рдг рез/рей: рдкреВрд░реНрд╡-рд╕рдВрдЬреНрдЮрд╛рдирд╛рддреНрдордХ рд╢рд┐рдХрд╛рд░реАрд▓рд╛рдИ рддреИрдирд╛рде рдЧрд░рд┐рдБрджреИрдЫ (рдпреЛ рдореМрди рд░реВрдкрдорд╛ рдЪрд▓реНрдЫ)...")
    PreCognitiveHunter().hunt_for_wallet_flows()
    print("тЬЕ рд╢рд┐рдХрд╛рд░реАрд▓реЗ рдЖрдлреНрдиреЛ рд░рд┐рдкреЛрд░реНрдЯ рдкреЗрд╢ рдЧрд░реНрдпреЛред\n")

    try:
        aggregator = IntelligenceAggregator()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT * FROM coins 
            WHERE price_usd IS NOT NULL AND volume_24h IS NOT NULL AND market_cap IS NOT NULL
            AND price_usd < ? AND volume_24h > ? AND market_cap > 0 
            ORDER BY market_cap DESC LIMIT 50
        """, (
            config.MARKET_PARAMETERS['max_coin_price'], 
            config.MARKET_PARAMETERS['min_volume_24h']
        ))
        candidate_coins = [dict(row) for row in cursor.fetchall()]
        
        if not candidate_coins:
            print("ЁЯЯб рдЪреЗрддрд╛рд╡рдиреА: рд╕реБрдиреМрд▓реЛ рдлрд┐рд▓реНрдЯрд░ рдкрд╛рд╕ рдЧрд░реНрдиреЗ рдХреБрдиреИ рдпреЛрдЧреНрдп рдЙрдореНрдореЗрджрд╡рд╛рд░ рднреЗрдЯрд┐рдПрдиред")
            return
            
        print(f"ЁЯФН рдЪрд░рдг реи/рей: рд╢реАрд░реНрд╖ {len(candidate_coins)} рдпреЛрдЧреНрдп рдЙрдореНрдореЗрджрд╡рд╛рд░рд╣рд░реВрдХреЛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕реБрд░реБ рд╣реБрдБрджреИрдЫ...")
        
        symbols = [c['symbol'] for c in candidate_coins]
        sentiments = aggregator.aggregate_intelligence_in_batch(symbols)
        
        print(f"\n{'Coin':<15} | {'Wallet Flow':<12} | {'Momentum':<10} | {'Narrative':<10} | {'FINAL SCORE':<12}")
        print("-"*80)

        for coin in candidate_coins:
            try:
                cursor.execute("SELECT weight FROM signals WHERE coin_id = ?", (coin['id'],))
                wallet_flow_raw = sum(s['weight'] for s in cursor.fetchall()) * 100
                sentiment_score = sentiments.get(coin['symbol'], 0.0)
                narrative_strength_raw = (sentiment_score + 1) * 50
                market_momentum_raw = min((coin['volume_24h'] / coin['market_cap']) * 100, 100)
                
                final_score = (
                    (0.20 * market_momentum_raw) + 
                    (0.50 * wallet_flow_raw) +
                    (0.30 * narrative_strength_raw)
                )
                print(f"{coin['symbol']:<15} | {wallet_flow_raw:<12.1f} | {market_momentum_raw:<10.1f} | {narrative_strength_raw:<10.1f} | {final_score:<12.2f} {'тЬЕ' if final_score > 65 else 'тЭМ'}")
            except Exception as e:
                print(f"{coin['symbol']:<15} | ERROR: {e}")

        print("\n" + "="*80)
        print("ЁЯФН рдЪрд░рдг рей/рей: рдирд┐рд░реАрдХреНрд╖рдг рд╕рдореНрдкрдиреНрдиред")
        print("="*80)

    finally:
        conn.close()

# --- рд╕рдорд╛рдзрд╛рди: рдирд┐рд░реАрдХреНрд╖рдХрд▓рд╛рдИ рд╕реНрдЯреЗрдЬрдорд╛ рдЬрд╛рди рдЖрджреЗрд╢ рджрд┐рдиреЗ ---
if __name__ == "__main__":
    run_inspection()
