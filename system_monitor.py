# system_monitor.py (v2.0 - The Omega Prime "World No. 1" Guardian)

import threading
import time
import logging
import psutil
import os
import socket
from datetime import datetime, timedelta

# --- рдХрд╛рдВрд╕реЗрдкреНрдЪреБрдЕрд▓ рдЗрдореНрдкреЛрд░реНрдЯрд╣рд░реВ (рдпреА рдореЛрдбреНрдпреБрд▓рд╣рд░реВ рдмрдиреЗрдкрдЫрд┐ рдХрд╛рдо рдЧрд░реНрдиреЗрдЫ) ---
# from config import SYSTEM_MONITOR_CONFIG, is_configured_correctly
# from email_system import EmailService

# --- рдЕрд╕реНрдерд╛рдпреА рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди (config.py рдмрдиреЗрдкрдЫрд┐ рддреНрдпрд╣рд╛рдБ рд╕рд╛рд░рд┐рдиреЗрдЫ) ---
# TODO: Move these to config.py
SYSTEM_MONITOR_CONFIG = {
    "interval_seconds": 300,  # 5 minutes
    "cpu_warn_percent": 80.0,
    "cpu_crit_percent": 95.0,
    "mem_warn_percent": 80.0,
    "mem_crit_percent": 90.0,
    "disk_warn_percent": 85.0,
    "disk_crit_percent": 95.0,
    "app_mem_limit_mb": 2048,  # 2GB limit for the AI process
    "heartbeat_timeout_seconds": 1800 # 30 minutes
}

class SystemMonitor:
    """
    рдЙрджреНрджреЗрд╢реНрдп #6 (рд░реАрдпрд▓-рдЯрд╛рдЗрдо рдореЛрдирд┐рдЯрд░рд┐рдВрдЧ) рд░ #2 (рд╕реНрд╡-рдорд░реНрдордд) рдХреЛ рд▓рд╛рдЧрд┐ рдПрдХ рд╕рдХреНрд░рд┐рдп рд░ рдмреБрджреНрдзрд┐рдорд╛рди рд╕рдВрд░рдХреНрд╖рдХред
    рдпреЛ рдкреНрд░рдгрд╛рд▓реАрдХреЛ рд╕реНрд╡рд╛рд╕реНрдереНрдп, рдПрдкреНрд▓рд┐рдХреЗрд╕рдирдХреЛ рдЕрд╡рд╕реНрдерд╛, рд░ рдиреЗрдЯрд╡рд░реНрдХ рдЬрдбрд╛рдирдХреЛ рдирд┐рдЧрд░рд╛рдиреА рдЧрд░реНрджрдЫред
    рдЧрдореНрднреАрд░ рд╕рдорд╕реНрдпрд╛рд╣рд░реВрдорд╛, рдпрд╕рд▓реЗ рдЗрдореЗрд▓ рдорд╛рд░реНрдлрдд рдЪреЗрддрд╛рд╡рдиреА рдкрдард╛рдЙрди рд╕рдХреНрдЫред
    """
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(SystemMonitor, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        # рдпреЛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдЧрд░реНрджрдЫ рдХрд┐ __init__ рдПрдХ рдкрдЯрдХ рдорд╛рддреНрд░ рдЪрд▓реНрдЫ (Singleton Pattern)
        if hasattr(self, '_initialized'):
            return
        self._initialized = True
        
        self.logger = logging.getLogger(__name__)
        self.monitoring_active = True
        self.last_heartbeat = datetime.now()
        self.process = psutil.Process(os.getpid())
        
        # Daemon рдереНрд░реЗрдбрд▓реЗ рдореБрдЦреНрдп рдХрд╛рд░реНрдпрдХреНрд░рдо рдмрдиреНрдж рд╣реБрдБрджрд╛ рд╕реНрд╡рддрдГ рдмрдиреНрдж рд╣реБрдиреНрдЫ
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.logger.info("Omega Prime Guardian (v2.0) рдкреНрд░рд╛рд░рдореНрдн рднрдпреЛред")

    def start(self):
        """рдореБрдЦреНрдп рдХрд╛рд░реНрдпрдХреНрд░рдорджреНрд╡рд╛рд░рд╛ рдХрд▓ рдЧрд░рд┐рдиреЗ: рдкреГрд╖реНрдарднреВрдорд┐рдорд╛ рдирд┐рдЧрд░рд╛рдиреА рд╕реБрд░реБ рдЧрд░реНрджрдЫред"""
        if not self.monitor_thread.is_alive():
            self.logger.info("рд╕рд┐рд╕реНрдЯрдо рдЧрд╛рд░реНрдбрд┐рдпрди рдереНрд░реЗрдб рд╕реБрд░реБ рдЧрд░реНрджреИред")
            self.monitor_thread.start()

    def stop(self):
        """рдирд┐рдЧрд░рд╛рдиреА рд▓реВрдк рд░реЛрдХреНрдЫред"""
        self.logger.info("рд╕рд┐рд╕реНрдЯрдо рдЧрд╛рд░реНрдбрд┐рдпрди рдереНрд░реЗрдб рд░реЛрдХреНрджреИред")
        self.monitoring_active = False

    def update_heartbeat(self):
        """(рдЙрджреНрджреЗрд╢реНрдп #2) main.py рд▓реЗ рдпреЛ рдкреНрд░рдХрд╛рд░реНрдпрд▓рд╛рдИ рдХрд▓ рдЧрд░реЗрд░ рдЖрдлреВ рдЬреАрд╡рд┐рдд рд░рд╣реЗрдХреЛ рд╕рдВрдХреЗрдд рджрд┐рдиреНрдЫред"""
        self.last_heartbeat = datetime.now()
        self.logger.debug("рд╣рд╛рд░реНрдЯрдмрд┐рдЯ рдкреНрд░рд╛рдкреНрдд рднрдпреЛред рдореБрдЦреНрдп рд▓реВрдк рд╕рдХреНрд░рд┐рдп рдЫред")

    def _send_critical_alert(self, subject, message):
        """(рдЙрджреНрджреЗрд╢реНрдп #33) рдЗрдореЗрд▓ рдкреНрд░рдгрд╛рд▓реА рдорд╛рд░реНрдлрдд рдЧрдореНрднреАрд░ рдЪреЗрддрд╛рд╡рдиреА рдкрдард╛рдЙрдБрдЫред"""
        self.logger.critical(f"ALERT TRIGGERED: {subject} - {message}")
        # TODO: email_system.py рдмрдиреЗрдкрдЫрд┐ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЗрдореЗрд▓ рдкрдард╛рдЙрдиреЗ рдХреЛрдб рдпрд╣рд╛рдБ рд░рд╛рдЦреНрдиреЗред
        # try:
        #     from config import EMAIL_CONFIG
        #     email_service = EmailService(...)
        #     email_service.send_text_email(EMAIL_CONFIG['default_recipient'], f"ЁЯЫбя╕П OMEGA PRIME SYSTEM ALERT: {subject}", message)
        #     self.logger.info("рдЧрдореНрднреАрд░ рдкреНрд░рдгрд╛рд▓реА рдЪреЗрддрд╛рд╡рдиреА рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрдард╛рдЗрдпреЛред")
        # except Exception as e:
        #     self.logger.error(f"рдкреНрд░рдгрд╛рд▓реА рдЪреЗрддрд╛рд╡рдиреА рдЗрдореЗрд▓ рдкрдард╛рдЙрди рдЕрд╕рдлрд▓: {e}")
        print(f"--- CRITICAL EMAIL ALERT (SIMULATED) ---\nSUBJECT: {subject}\nMESSAGE: {message}\n-----------------------------------------")


    def _monitor_loop(self):
        """рдореБрдЦреНрдп рд▓реВрдк рдЬрд╕рд▓реЗ рдкреНрд░рдгрд╛рд▓реАрдХреЛ рд╣рд░реЗрдХ рдкрдХреНрд╖рдХреЛ рдЬрд╛рдБрдЪ рдЧрд░реНрджрдЫред"""
        self.logger.info(f"рдЧрд╛рд░реНрдбрд┐рдпрди рдирд┐рдЧрд░рд╛рдиреА рд▓реВрдк рд╕реБрд░реБ рднрдпреЛред рдЕрдиреНрддрд░рд╛рд▓: {SYSTEM_MONITOR_CONFIG['interval_seconds']} рд╕реЗрдХреЗрдиреНрдбред")
        
        while self.monitoring_active:
            # рез. рдкреНрд░рдгрд╛рд▓реА рд╕реНрд░реЛрдд рдЬрд╛рдБрдЪ (CPU, RAM, Disk)
            cpu_usage = psutil.cpu_percent(interval=1)
            mem_info = psutil.virtual_memory()
            disk_info = psutil.disk_usage('/')
            
            if cpu_usage > SYSTEM_MONITOR_CONFIG['cpu_crit_percent']:
                self._send_critical_alert("CPU Usage CRITICAL", f"CPU usage is at {cpu_usage}%, exceeding the {SYSTEM_MONITOR_CONFIG['cpu_crit_percent']}% threshold.")
            elif cpu_usage > SYSTEM_MONITOR_CONFIG['cpu_warn_percent']:
                self.logger.warning(f"CPU usage HIGH: {cpu_usage}%")

            if mem_info.percent > SYSTEM_MONITOR_CONFIG['mem_crit_percent']:
                 self._send_critical_alert("Memory Usage CRITICAL", f"System memory usage is at {mem_info.percent}%, exceeding the {SYSTEM_MONITOR_CONFIG['mem_crit_percent']}% threshold.")
            elif mem_info.percent > SYSTEM_MONITOR_CONFIG['mem_warn_percent']:
                self.logger.warning(f"System memory usage HIGH: {mem_info.percent}%")

            # реи. рдПрдкреНрд▓рд┐рдХреЗрд╕рди рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдБрдЪ (App Memory, Heartbeat)
            app_mem_mb = self.process.memory_info().rss / (1024 * 1024)
            if app_mem_mb > SYSTEM_MONITOR_CONFIG['app_mem_limit_mb']:
                self._send_critical_alert("Application Memory CRITICAL", f"Omega Prime is consuming {app_mem_mb:.2f} MB of memory, exceeding the limit of {SYSTEM_MONITOR_CONFIG['app_mem_limit_mb']} MB. Possible memory leak.")

            time_since_heartbeat = datetime.now() - self.last_heartbeat
            if time_since_heartbeat > timedelta(seconds=SYSTEM_MONITOR_CONFIG['heartbeat_timeout_seconds']):
                self._send_critical_alert("Application HANG Detected", f"No heartbeat received for {time_since_heartbeat.total_seconds():.0f} seconds. The main process may be frozen or crashed. Initiating self-healing protocol is advised.")
                # (рдЙрджреНрджреЗрд╢реНрдп #2) рднрд╡рд┐рд╖реНрдпрдорд╛, рдпрд╣рд╛рдБ рд╕реНрд╡рддрдГ рдкреБрдирдГ рд╕реБрд░реБ рдЧрд░реНрдиреЗ рдХреЛрдб рд░рд╛рдЦреНрди рд╕рдХрд┐рдиреНрдЫред
                # from main import restart_program; restart_program()

            # рей. рдиреЗрдЯрд╡рд░реНрдХ рдЬрдбрд╛рди рдЬрд╛рдБрдЪ
            try:
                socket.create_connection(("8.8.8.8", 53), timeout=5) # рдЧреБрдЧрд▓рдХреЛ DNS рдорд╛ рдЬрдбрд╛рди рдЧрд░реНрдиреЗ рдкреНрд░рдпрд╛рд╕
                network_ok = True
            except OSError:
                network_ok = False
                self._send_critical_alert("Network Connectivity LOST", "Cannot connect to the internet (8.8.8.8). Omega Prime is operating blind.")

            self.logger.info(f"рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдБрдЪ - CPU: {cpu_usage}%, SysMem: {mem_info.percent}%, AppMem: {app_mem_mb:.2f}MB, Network: {'OK' if network_ok else 'FAIL'}")
            time.sleep(SYSTEM_MONITOR_CONFIG['interval_seconds'])


# --- рдЖрддреНрдо-рдкрд░реАрдХреНрд╖рдг рдмреНрд▓рдХ (рдпреЛ рдлрд╛рдЗрд▓ рд╕реАрдзреИ рдЪрд▓рд╛рдПрд░ рдкрд░реАрдХреНрд╖рдг рдЧрд░реНрди) ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    print("Omega Prime Guardian (v2.0) рдХреЛ рд╕реНрдЯреНрдпрд╛рдиреНрдбрдЕрд▓реЛрди рдкрд░реАрдХреНрд╖рдг рдЪрд▓рд┐рд░рд╣реЗрдХреЛ рдЫ...")
    
    # рдЫрд┐рдЯреЛ рдЬрд╛рдБрдЪрдХреЛ рд▓рд╛рдЧрд┐ рдЕрдиреНрддрд░рд╛рд▓ рдУрднрд░рд░рд╛рдЗрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН
    SYSTEM_MONITOR_CONFIG['interval_seconds'] = 10
    SYSTEM_MONITOR_CONFIG['heartbeat_timeout_seconds'] = 20
    
    monitor = SystemMonitor()
    monitor.start()
    
    try:
        print("рдкрд╣рд┐рд▓реЛ резрел рд╕реЗрдХреЗрдиреНрдбрдХреЛ рд▓рд╛рдЧрд┐ рд╣рд╛рд░реНрдЯрдмрд┐рдЯ рдкрдард╛рдЗрдБрджреИ...")
        for i in range(3):
            time.sleep(5)
            monitor.update_heartbeat()
            print(f"[{datetime.now()}] Heartbeat sent.")
        
        print("\nрдЕрдм рейреж рд╕реЗрдХреЗрдиреНрдбрдХреЛ рд▓рд╛рдЧрд┐ рд╣рд╛рд░реНрдЯрдмрд┐рдЯ рд░реЛрдХрд┐рдБрджреИ, рд╣реНрдпрд╛рдЩреНрдЧ рдкрддреНрддрд╛ рд▓рдЧрд╛рдЙрдиреЗ рдкрд░реАрдХреНрд╖рдг рдЧрд░реНрди...")
        time.sleep(30)

    except KeyboardInterrupt:
        print("\nрдкреНрд░рдпреЛрдЧрдХрд░реНрддрд╛рджреНрд╡рд╛рд░рд╛ рдкрд░реАрдХреНрд╖рдг рд░реЛрдХрд┐рдпреЛред")
    finally:
        monitor.stop()
        print("рд╕реНрдЯреНрдпрд╛рдиреНрдбрдЕрд▓реЛрди рдкрд░реАрдХреНрд╖рдг рд╕рдорд╛рдкреНрдд рднрдпреЛред")
