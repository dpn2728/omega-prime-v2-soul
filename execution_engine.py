# execution_engine.py (v1.0 - The Emperor's Iron Fist - Simulation Mode)

import ccxt
import logging
import os

# --- рдХреЗрдиреНрджреНрд░реАрдп рдирд┐рдпрдиреНрддреНрд░рдг рдХрдХреНрд╖рдмрд╛рдЯ рдХрдиреНрдлрд┐рдЧрд░реЗрд╕рди рд▓реЛрдб рдЧрд░реНрдиреЗ ---
try:
    # рд╣рд╛рдореА рднрд╡рд┐рд╖реНрдпрдорд╛ рдПрдХреНрд╕рдЪреЗрдиреНрдЬ API рдХреБрдЮреНрдЬреАрд╣рд░реВ config рдорд╛рд░реНрдлрдд рд▓реЛрдб рдЧрд░реНрдиреЗрдЫреМрдВ
    from config import API_KEYS 
except ImportError:
    print("FATAL: `config.py` not found. The Execution Engine cannot be armed.")
    API_KEYS = {}

class ExecutionEngine:
    """
    рдЙрджреНрджреЗрд╢реНрдп #37 (рд╕реНрд╡рддрдГ рдЯреНрд░реЗрдбрд┐рдЩреНрдЧ) рдХреЛ рд▓рд╛рдЧрд┐ рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдЗрдиреНрдЬрд┐рдиред
    рдпреЛ "рд╕рдореНрд░рд╛рдЯрдХреЛ рдлрд▓рд╛рдореЗ рдореБрдЯреНрдареА" рд╣реЛ рдЬрд╕рд▓реЗ AI рдХреЛ рдирд┐рд░реНрдгрдпрд╣рд░реВрд▓рд╛рдИ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЯреНрд░реЗрдбрдорд╛ рдкрд░рд┐рдгрдд рдЧрд░реНрджрдЫред
    """
    def __init__(self, exchange_id='kucoin', simulation_mode=True):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.simulation_mode = simulation_mode
        self.exchange_id = exchange_id.lower()
        self.exchange = self._initialize_client()
        
        if self.simulation_mode:
            self.logger.warning("!!! рдлрд▓рд╛рдореЗ рдореБрдЯреНрдареА 'рд╕рд┐рдореБрд▓реЗрд╢рди рдореЛрдб' рдорд╛ рдЫред рдХреБрдиреИ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЯреНрд░реЗрдб рдЧрд░рд┐рдиреЗ рдЫреИрдиред !!!")
        else:
            self.logger.warning("ЁЯФеЁЯФеЁЯФе рдлрд▓рд╛рдореЗ рдореБрдЯреНрдареА 'рд▓рд╛рдЗрдн рдореЛрдб' рдорд╛ рдЫ! рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдкреИрд╕рд╛ рдкреНрд░рдпреЛрдЧ рдЧрд░рд┐рдиреЗрдЫ! ЁЯФеЁЯФеЁЯФе")

    def _initialize_client(self):
        """CCXT рдПрдХреНрд╕рдЪреЗрдиреНрдЬ рдХреНрд▓рд╛рдЗрдиреНрдЯ рдкреНрд░рд╛рд░рдореНрдн рдЧрд░реНрджрдЫред"""
        try:
            exchange_class = getattr(ccxt, self.exchange_id)
            # TODO: `omega_secrets.py` рдорд╛ 'exchange_keys' рдЦрдгреНрдб рдердкреЗрдкрдЫрд┐ рдпреЛ рд╕рдХреНрд░рд┐рдп рдЧрд░реНрдиреЗ
            # exchange_config = {
            #     'apiKey': API_KEYS.get('exchange_keys', {}).get(self.exchange_id, {}).get('api_key'),
            #     'secret': API_KEYS.get('exchange_keys', {}).get(self.exchange_id, {}).get('secret_key'),
            #     'password': API_KEYS.get('exchange_keys', {}).get(self.exchange_id, {}).get('password'), # KuCoin рдЬрд╕реНрддрд╛рдХреЛ рд▓рд╛рдЧрд┐
            # }
            # # None рдорд╛рдирд╣рд░реВ рд╣рдЯрд╛рдЙрдиреЗ
            # exchange_config = {k: v for k, v in exchange_config.items() if v is not None}
            
            # рдЕрд╣рд┐рд▓реЗрдХреЛ рд▓рд╛рдЧрд┐, API рдХреБрдЮреНрдЬреАрд╣рд░реВ рдмрд┐рдирд╛ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдореЛрдбрдорд╛ рдкреНрд░рд╛рд░рдореНрдн рдЧрд░реНрдиреЗ
            exchange = exchange_class()
            self.logger.info(f"'{self.exchange_id}' рдПрдХреНрд╕рдЪреЗрдиреНрдЬрдХреЛ рд▓рд╛рдЧрд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХреНрд▓рд╛рдЗрдиреНрдЯ рдкреНрд░рд╛рд░рдореНрдн рднрдпреЛред")
            return exchange
        except AttributeError:
            self.logger.critical(f"FATAL: рдПрдХреНрд╕рдЪреЗрдиреНрдЬ ID '{self.exchange_id}' рдЕрдорд╛рдиреНрдп рдЫред")
            return None
        except Exception as e:
            self.logger.critical(f"рдПрдХреНрд╕рдЪреЗрдиреНрдЬ рдХреНрд▓рд╛рдЗрдиреНрдЯ рдкреНрд░рд╛рд░рдореНрдн рдЧрд░реНрджрд╛ рддреНрд░реБрдЯрд┐: {e}")
            return None

    def execute_buy_order(self, symbol, usdt_amount, order_type='market'):
        """
        рдПрдЙрдЯрд╛ рдЦрд░рд┐рдж рдЖрджреЗрд╢ (BUY order) рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдЧрд░реНрджрдЫред
        :param symbol: рд╕рд┐рдХреНрдХрд╛рдХреЛ рдкреНрд░рддреАрдХ (e.g., 'BTC')
        :param usdt_amount: рдХрддрд┐ USDT рдХреЛ рдХрд┐рдиреНрдиреЗ
        :param order_type: 'market' рд╡рд╛ 'limit'
        :return: dict or None: рдЯреНрд░реЗрдбрдХреЛ рдкрд░рд┐рдгрд╛рдо
        """
        if not self.exchange:
            self.logger.error("рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рд░рджреНрдж рдЧрд░рд┐рдпреЛ: рдПрдХреНрд╕рдЪреЗрдиреНрдЬ рдХреНрд▓рд╛рдЗрдиреНрдЯ рдкреНрд░рд╛рд░рдореНрдн рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред")
            return None

        market_symbol = f"{symbol.upper()}/USDT"
        
        self.logger.info(f"рдЖрджреЗрд╢ рдкреНрд░рд╛рдкреНрдд рднрдпреЛ: {usdt_amount:.2f} USDT рдХреЛ {market_symbol} рдХрд┐рдиреНрдиреБрд╣реЛрд╕реН ({order_type} order)ред")

        if self.simulation_mode:
            self.logger.info(f"--- SIMULATION ---")
            self.logger.info(f"ACTION: {market_symbol} рдХреЛ рд▓рд╛рдЧрд┐ рдорд╛рд░реНрдХреЗрдЯ рдмрд╛рдЗ рдЕрд░реНрдбрд░ рджрд┐рдЗрдиреЗрдЫред")
            self.logger.info(f"AMOUNT: {usdt_amount:.2f} USDT")
            self.logger.info(f"REASON: AI 'Genesis Directive' рджреНрд╡рд╛рд░рд╛ рдЯреНрд░рд┐рдЧрд░ рдЧрд░рд┐рдпреЛред")
            self.logger.info(f"--- END SIMULATION ---")
            # рдПрдХ рдирдХреНрдХрд▓реА рд╕рдлрд▓ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдлрд░реНрдХрд╛рдЙрдиреЗ
            return {
                'id': 'simulated_order_12345', 'symbol': market_symbol,
                'status': 'closed', 'side': 'buy', 'amount': usdt_amount
            }
        
        # --- LIVE TRADING BLOCK ---
        # NOTE: This block will execute REAL trades. Use with extreme caution.
        try:
            self.logger.warning(f"рд▓рд╛рдЗрдн рдЯреНрд░реЗрдб рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдЧрд░реНрджреИ: {market_symbol} рдХреЛ рд▓рд╛рдЧрд┐ {usdt_amount:.2f} USDTред")
            
            # рдмрдЬрд╛рд░ рдЬрд╛рдБрдЪ рдЧрд░реНрдиреЗ
            self.exchange.load_markets()
            if market_symbol not in self.exchange.markets:
                self.logger.error(f"рдЯреНрд░реЗрдб рдЕрд╕рдлрд▓: рдмрдЬрд╛рд░ '{market_symbol}' '{self.exchange_id}' рдорд╛ рдлреЗрд▓рд╛ рдкрд░реЗрдиред")
                return None

            if order_type == 'market':
                order = self.exchange.create_market_buy_order(market_symbol, usdt_amount)
            else:
                # TODO: Limit order logic
                self.logger.warning("Limit order logic рдЕрд╣рд┐рд▓реЗ рд▓рд╛рдЧреВ рдЧрд░рд┐рдПрдХреЛ рдЫреИрдиред рдорд╛рд░реНрдХреЗрдЯ рдЕрд░реНрдбрд░рдорд╛ рдлрд░реНрдХрд┐рдБрджреИред")
                order = self.exchange.create_market_buy_order(market_symbol, usdt_amount)
            
            self.logger.info(f"рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЯреНрд░реЗрдб рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рднрдпреЛред рдЕрд░реНрдбрд░ ID: {order.get('id')}")
            return order

        except ccxt.InsufficientFunds as e:
            self.logger.critical(f"рдЯреНрд░реЗрдб рдЕрд╕рдлрд▓: рдЕрдкрд░реНрдпрд╛рдкреНрдд рдмреНрдпрд╛рд▓реЗрдиреНрд╕! {e}")
        except ccxt.NetworkError as e:
            self.logger.error(f"рдЯреНрд░реЗрдб рдЕрд╕рдлрд▓: рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред {e}")
        except ccxt.ExchangeError as e:
            self.logger.error(f"рдЯреНрд░реЗрдб рдЕрд╕рдлрд▓: рдПрдХреНрд╕рдЪреЗрдиреНрдЬ рддреНрд░реБрдЯрд┐ред {e}")
        except Exception as e:
            self.logger.critical(f"рдЯреНрд░реЗрдб рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдЧрд░реНрджрд╛ рдПрдХ рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рддреНрд░реБрдЯрд┐ рднрдпреЛ: {e}", exc_info=True)
        
        return None

# --- рдЖрддреНрдо-рдкрд░реАрдХреНрд╖рдг рдмреНрд▓рдХ ---
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # рд╕рд┐рдореБрд▓реЗрд╢рди рдореЛрдбрдорд╛ рдкрд░реАрдХреНрд╖рдг
    iron_fist_simulated = ExecutionEngine(simulation_mode=True)
    print("\n--- рд╕рд┐рдореБрд▓реЗрд╢рди рдореЛрдбрдорд╛ рдкрд░реАрдХреНрд╖рдг рдЪрд▓рд┐рд░рд╣реЗрдХреЛ рдЫ ---")
    iron_fist_simulated.execute_buy_order(symbol='BTC', usdt_amount=100.0)
    
    # рд▓рд╛рдЗрдн рдореЛрдбрдорд╛ рдкрд░реАрдХреНрд╖рдг (рд╕рд╛рд╡рдзрд╛рдиреА рдЕрдкрдирд╛рдЙрдиреБрд╣реЛрд╕реН!)
    # print("\n--- рд▓рд╛рдЗрдн рдореЛрдбрдорд╛ рдкрд░реАрдХреНрд╖рдг (рдпреЛ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЯреНрд░реЗрдб рдЧрд░реНрдиреЗрдЫ!) ---")
    # iron_fist_live = ExecutionEngine(simulation_mode=False)
    # iron_fist_live.execute_buy_order(symbol='DOGE', usdt_amount=5.0) # рд╕рд╛рдиреЛ рд░рдХрдордХреЛ рд╕рд╛рде рдкрд░реАрдХреНрд╖рдг рдЧрд░реНрдиреБрд╣реЛрд╕реН
