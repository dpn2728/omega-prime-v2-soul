# tri_mind.py (v3.0 - The Evolved Living Brain of the Empire)

import logging
import numpy as np
from scipy.stats import linregress
from concurrent.futures import ThreadPoolExecutor
from pprint import pprint

class BaseMind:
    """‡§∏‡§¨‡•à ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï‡§π‡§∞‡•Ç‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§Ü‡§ß‡§æ‡§∞ ‡§µ‡§∞‡•ç‡§ó‡•§"""
    def __init__(self, mind_name):
        self.mind_name = mind_name
        self.logger = logging.getLogger(f"TriMind.{self.mind_name}")

    def analyze(self, coin_data, market_condition='neutral'):
        raise NotImplementedError("‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï‡§≤‡•á 'analyze' ‡§µ‡§ø‡§ß‡§ø ‡§≤‡§æ‡§ó‡•Ç ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ‡•§")

# --- ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï #1: The Prophet (The Oracle Mind) v3.0 ---
class ProphetMind(BaseMind):
    """‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø, ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞‡§ï‡•ã ‡§ó‡§π‡§ø‡§∞‡§æ‡§á, ‡§∞ ‡§¨‡§ú‡§æ‡§∞ ‡§ï‡•ç‡§Ø‡§æ‡§™‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self):
        super().__init__("Prophet")

    def _calculate_trend_slope(self, historical_prices):
        """‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§π‡§∞‡•Ç‡§ï‡•ã ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø ‡§¢‡§≤‡§æ‡§® (trend slope) ‡§ó‡§£‡§®‡§æ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
        if not historical_prices or len(historical_prices) < 7: return 0
        y = np.array(historical_prices)
        x = np.arange(len(y))
        slope, _, _, _, _ = linregress(x, y)
        return slope

    def analyze(self, coin_data, market_condition='neutral'):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
        score = 0
        reasons = []

        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•ß: ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø (Historical Trend)
        trend_slope = self._calculate_trend_slope(coin_data.get('historical_prices', []))
        if trend_slope > 0.5: # ‡§Ö‡§ù ‡§ï‡§°‡§æ ‡§Æ‡§æ‡§™‡§¶‡§£‡•ç‡§°
            score += 25
            reasons.append(f"Strong positive 30d price trend (slope: {trend_slope:.4f})")
        
        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•®: ‡§¨‡§ú‡§æ‡§∞ ‡§ï‡•ç‡§Ø‡§æ‡§™ "Sweet Spot"
        mc = coin_data.get('market_cap', 0)
        if 100000 < mc <= 1000000: score += 30; reasons.append("Micro-cap with high potential")
        elif 1000000 < mc <= 5000000: score += 15
        
        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•©: ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞‡§ï‡•ã ‡§ó‡§π‡§ø‡§∞‡§æ‡§á (News Depth & Sentiment - v3.0 upgrade)
        sentiment = coin_data.get('sentiment_score', 0)
        article_count = coin_data.get('news_article_count', 0)
        if sentiment > 0.5 and article_count > 5:
            score += 35
            reasons.append(f"CRITICAL: Strong, widespread positive sentiment ({sentiment:.2f} from {article_count} articles)")
        elif sentiment > 0.2:
            score += 10
            reasons.append(f"Moderate positive sentiment ({sentiment:.2f})")
        
        confidence = max(0, min(100, int(score)))
        threshold = get_adaptive_thresholds(market_condition)['prophet']
        verdict = confidence >= threshold
        
        return verdict, confidence, reasons

# --- ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï #2: The Strategist (The Risk/Reward Mind) v3.0 ---
class StrategistMind(BaseMind):
    """‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ, ‡§§‡§∞‡§≤‡§§‡§æ, ‡§∞ ‡§¨‡§ú‡§æ‡§∞‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self):
        super().__init__("Strategist")

    def _calculate_volatility(self, historical_prices):
        if not historical_prices or len(historical_prices) < 2: return 0.0
        prices = np.array(historical_prices)
        log_returns = np.log(prices[1:] / prices[:-1])
        daily_std = np.std(log_returns)
        return daily_std * np.sqrt(365) # Annualize

    def analyze(self, coin_data, market_condition='neutral'):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§ú‡•ã‡§ñ‡§ø‡§Æ/‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
        risk_score = 0
        reasons = []

        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•ß: ‡§Ö‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ (Volatility)
        volatility = self._calculate_volatility(coin_data.get('historical_prices', []))
        if volatility > 2.5: risk_score += 40; reasons.append(f"Extreme volatility ({volatility:.2f})")
        elif volatility > 1.5: risk_score += 20; reasons.append(f"High volatility ({volatility:.2f})")

        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•®: ‡§§‡§∞‡§≤‡§§‡§æ (Liquidity - Volume/MC ratio)
        mc = coin_data.get('market_cap', 1)
        vol = coin_data.get('volume', 0)
        liquidity_ratio = (vol / mc) * 100 if mc > 0 else 0
        if liquidity_ratio < 10: # ‡§Ö‡§ù ‡§ï‡§°‡§æ ‡§Æ‡§æ‡§™‡§¶‡§£‡•ç‡§°
            risk_score += 50; reasons.append(f"CRITICAL: Low liquidity ({liquidity_ratio:.2f}%)")
        
        confidence = max(0, 100 - int(risk_score))
        threshold = get_adaptive_thresholds(market_condition)['strategist']
        verdict = confidence >= threshold
        
        return verdict, confidence, reasons

# --- ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï #3: The Guardian (The Security Mind) v3.0 ---
class GuardianMind(BaseMind):
    """‡§Ö‡§®-‡§ö‡•á‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ '‡§∞‡•á‡§° ‡§´‡•ç‡§≤‡•ç‡§Ø‡§æ‡§ó‡§π‡§∞‡•Ç' ‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ ‡§∞ VETO ‡§∂‡§ï‡•ç‡§§‡§ø ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self):
        super().__init__("Guardian")

    def analyze(self, coin_data, market_condition='neutral'):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
        red_flags = 0
        reasons = []
        security_info = coin_data.get('on_chain_security', {})

        # ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡•ß: ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡§®‡•ç‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡•ç‡§ü ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ (v3.0 VETO Power)
        is_verified = security_info.get('source_code_verified', False)
        if not is_verified and coin_data.get('contract_address'): # Check only if it's a token
            red_flags = 10 # Max red flags
            reasons.append("FATAL VETO: Smart contract source code is NOT verified.")
        else:
            reasons.append("Contract source code verified.")
        
        # ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§ï‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§Å‡§ö‡§π‡§∞‡•Ç ‡§Ø‡§π‡§æ‡§Å ‡§•‡§™‡•ç‡§® ‡§∏‡§ï‡§ø‡§®‡•ç‡§õ...

        confidence = max(0, 100 - (red_flags * 25))
        threshold = get_adaptive_thresholds(market_condition)['guardian']
        verdict = confidence >= threshold
        
        return verdict, confidence, reasons

# --- ‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤ ‡§•‡•ç‡§∞‡•á‡§∏‡§π‡•ã‡§≤‡•ç‡§° ‡§á‡§®‡•ç‡§ú‡§ø‡§® ---
def get_adaptive_thresholds(market_condition='neutral'):
    """‡§¨‡§ú‡§æ‡§∞‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§‡§ø ‡§•‡•ç‡§∞‡•á‡§∏‡§π‡•ã‡§≤‡•ç‡§°‡§π‡§∞‡•Ç ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§® ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    if market_condition == 'bullish': # Riskier bets are more acceptable
        return {'prophet': 60, 'strategist': 40, 'guardian': 50}
    if market_condition == 'bearish': # Only the absolute best candidates
        return {'prophet': 80, 'strategist': 60, 'guardian': 75}
    # Neutral/Default
    return {'prophet': 70, 'strategist': 50, 'guardian': 70}

# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§∞‡•ç‡§ï‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ü‡§∞ (The Main Orchestrator) ---
def analyze_single_coin_for_batch(coin_data, market_condition='neutral'):
    prophet = ProphetMind()
    strategist = StrategistMind()
    guardian = GuardianMind()

    prophet_verdict, prophet_conf, prophet_reasons = prophet.analyze(coin_data, market_condition)
    strategist_verdict, strategist_conf, strategist_reasons = strategist.analyze(coin_data, market_condition)
    guardian_verdict, guardian_conf, guardian_reasons = guardian.analyze(coin_data, market_condition)
    
    final_verdict = all([prophet_verdict, strategist_verdict, guardian_verdict])
    
    return {
        'symbol': coin_data['symbol'], 'name': coin_data['name'],
        'final_verdict': 'APPROVED' if final_verdict else 'REJECTED',
        'prophet_mind': {'verdict': prophet_verdict, 'confidence': prophet_conf, 'reasons': prophet_reasons},
        'strategist_mind': {'verdict': strategist_verdict, 'confidence': strategist_conf, 'reasons': strategist_reasons},
        'guardian_mind': {'verdict': guardian_verdict, 'confidence': guardian_conf, 'reasons': guardian_reasons}
    }

def run_tri_mind_consensus_for_batch(coins_batch, market_condition='neutral'):
    logger = logging.getLogger("TriMind.Orchestrator")
    logger.info(f"üëë ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï (v3.0) ‡§≤‡•á {len(coins_batch)} ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§¨‡•ç‡§Ø‡§æ‡§ö‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§Ø‡•ã‡•§")
    analysis_results = []
    
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(analyze_single_coin_for_batch, coin, market_condition) for coin in coins_batch]
        for future in futures:
            try:
                analysis_results.append(future.result())
            except Exception as e:
                logger.error(f"‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§Æ‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}", exc_info=True)

    approved_coins = [r for r in analysis_results if r['final_verdict'] == 'APPROVED']
    logger.info(f"üß† ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡§Æ‡•ç‡§™‡§®‡•ç‡§®‡•§ {len(approved_coins)}/{len(coins_batch)} ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§π‡§∞‡•Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§≠‡§è‡•§")
    return approved_coins # ‡§Ö‡§¨ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§π‡§∞‡•Ç ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§´‡§∞‡•ç‡§ï‡§æ‡§â‡§®‡•á

# --- ‡§Ü‡§§‡•ç‡§Æ-‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§¨‡•ç‡§≤‡§ï (v3.0) ---
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    mock_coins = [
        { # ‡§â‡§§‡•ç‡§§‡§Æ ‡§â‡§Æ‡•ç‡§Æ‡•á‡§¶‡§µ‡§æ‡§∞
            'name': 'GoodCoin', 'symbol': 'GOOD', 'market_cap': 800000, 'volume': 600000,
            'sentiment_score': 0.8, 'news_article_count': 10,
            'historical_prices': np.linspace(100, 180, 30), # Strong trend
            'contract_address': '0x123', 'on_chain_security': {'source_code_verified': True}
        },
        { # Guardian VETO ‡§ï‡•ã ‡§∂‡§ø‡§ï‡§æ‡§∞
            'name': 'ShadyCoin', 'symbol': 'SHADY', 'market_cap': 1200000, 'volume': 800000,
            'sentiment_score': 0.9, 'news_article_count': 20,
            'historical_prices': np.linspace(100, 200, 30),
            'contract_address': '0x456', 'on_chain_security': {'source_code_verified': False} # The VETO trigger
        },
        { # Prophet ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ (‡§ï‡§Æ ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞)
            'name': 'QuietCoin', 'symbol': 'QUIET', 'market_cap': 900000, 'volume': 500000,
            'sentiment_score': 0.7, 'news_article_count': 2, # Fails the Prophet's new check
            'historical_prices': np.linspace(100, 160, 30),
            'contract_address': '0x789', 'on_chain_security': {'source_code_verified': True}
        }
    ]
    
    print("\n--- ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£: ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï v3.0 ---")
    approved_results = run_tri_mind_consensus_for_batch(mock_coins, market_condition='neutral')
    
    print("\n--- ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§â‡§Æ‡•ç‡§Æ‡•á‡§¶‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç ---")
    if approved_results:
        pprint(approved_results)
    else:
        print("‡§ï‡•Å‡§®‡•à ‡§™‡§®‡§ø ‡§â‡§Æ‡•ç‡§Æ‡•á‡§¶‡§µ‡§æ‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§≠‡§è‡§®‡•§")
