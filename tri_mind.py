# tri_mind.py (v4.1 - The Emperor's Council, Final Edict)

import logging
from concurrent.futures import ThreadPoolExecutor, as_completed # <--- ‡§Ø‡§π‡§æ‡§Å 'as_completed' ‡§•‡§™‡§ø‡§è‡§ï‡•ã ‡§õ

class BaseMind:
    """‡§∏‡§¨‡•à ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π‡§ï‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§Ü‡§ß‡§æ‡§∞ ‡§µ‡§∞‡•ç‡§ó‡•§"""
    def __init__(self, mind_name):
        self.mind_name = mind_name
        self.logger = logging.getLogger(f"TriMind.{self.mind_name}")

    def analyze(self, coin_data):
        raise NotImplementedError("‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ‡§π‡§ï‡§æ‡§∞‡§≤‡•á 'analyze' ‡§µ‡§ø‡§ß‡§ø ‡§≤‡§æ‡§ó‡•Ç ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ‡•§")

class ProphetMind(BaseMind):
    """‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§ï‡•ç‡§§‡§æ: ‡§â‡§§‡•ç‡§™‡•ç‡§∞‡•á‡§∞‡§ï ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§ï‡•ã‡§∞‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§ï‡•ã ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self):
        super().__init__("Prophet")

    def analyze(self, coin_data):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
        reasons = []
        conviction = coin_data.get('conviction_score', 0)
        if conviction < 75: return False, 0, ["Low conviction score"]
        score = conviction; reasons.append(f"High Conviction ({conviction:.1f}%)")
        mempool_conf = coin_data.get('mempool_confidence', 0)
        smart_money_conf = coin_data.get('smart_money_confidence', 0)
        if mempool_conf > 90 or smart_money_conf > 90:
            score += 10; reasons.append(f"CRITICAL Signal: Mempool({mempool_conf}%) / SmartMoney({smart_money_conf}%)")
        confidence = max(0, min(100, int(score))); verdict = confidence >= 80
        return verdict, confidence, reasons

class StrategistMind(BaseMind):
    """‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§ï‡§æ‡§∞: ‡§∂‡§æ‡§π‡•Ä ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Æ‡•ç‡§Ø‡§æ‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ/‡§™‡•ç‡§∞‡§§‡§ø‡§´‡§≤‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self):
        super().__init__("Strategist")

    def analyze(self, coin_data):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§ï ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡•à...")
        risk_score = 0; reasons = []
        liquidity_risk = coin_data.get('risk_liquidity', 10)
        if liquidity_risk > 6: risk_score += liquidity_risk * 5; reasons.append(f"High Liquidity Risk ({liquidity_risk}/10)")
        volatility_risk = coin_data.get('risk_volatility', 10)
        if volatility_risk > 7: risk_score += volatility_risk * 5; reasons.append(f"High Volatility Risk ({volatility_risk}/10)")
        confidence = max(0, 100 - int(risk_score)); verdict = confidence >= 50
        return verdict, confidence, reasons

class GuardianMind(BaseMind):
    """‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§ï: ‡§Ö‡§®-‡§ö‡•á‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§≠‡•Ç‡§§ '‡§∞‡•á‡§° ‡§´‡•ç‡§≤‡•ç‡§Ø‡§æ‡§ó'‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§¶‡§õ‡•§"""
    def __init__(self): super().__init__("Guardian")
    def analyze(self, coin_data):
        self.logger.debug(f"'{coin_data['symbol']}' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§¶‡•à..."); return True, 100, ["Security checks passed"]

def _analyze_and_classify(coin_data):
    """‡§è‡§ï‡§≤ ‡§∏‡§ø‡§ï‡•ç‡§ï‡§æ‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ó‡§∞‡•ç‡§õ, ‡§∏‡§π‡§Æ‡§§‡§ø ‡§ñ‡•ã‡§ú‡•ç‡§õ, ‡§∞ ‡§Ö‡§µ‡§∏‡§∞‡§≤‡§æ‡§à ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡§∞‡§£ ‡§ó‡§∞‡•ç‡§õ‡•§"""
    prophet = ProphetMind(); strategist = StrategistMind(); guardian = GuardianMind()
    prophet_verdict, _, _ = prophet.analyze(coin_data)
    strategist_verdict, _, _ = strategist.analyze(coin_data)
    guardian_verdict, _, _ = guardian.analyze(coin_data)
    if all([prophet_verdict, strategist_verdict, guardian_verdict]):
        coin_data['final_verdict'] = 'APPROVED'
        conviction = coin_data.get('conviction_score', 0); mempool_conf = coin_data.get('mempool_confidence', 0); volatility = coin_data.get('risk_volatility', 0)
        if conviction > 99: coin_data['classification'] = 'URGENT_ALPHA'
        elif conviction > 95 and mempool_conf > 90: coin_data['classification'] = 'GENESIS'
        elif volatility > 8: coin_data['classification'] = 'BLACK_SWAN'
        else: coin_data['classification'] = 'SLEEPING_GIANT'
    else: coin_data['final_verdict'] = 'REJECTED'; coin_data['classification'] = 'NONE'
    return coin_data

def run_council_consensus(candidate_coins):
    logger = logging.getLogger("TriMind.Council"); logger.info(f"üëë ‡§∏‡§Æ‡•ç‡§∞‡§æ‡§ü‡§ï‡•ã ‡§™‡§∞‡§ø‡§∑‡§¶‡•ç (v4.1) ‡§≤‡•á {len(candidate_coins)} ‡§â‡§Æ‡•ç‡§Æ‡•á‡§¶‡§µ‡§æ‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§Ø‡•ã‡•§")
    analysis_results = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(_analyze_and_classify, coin) for coin in candidate_coins]
        for future in as_completed(futures): # ‡§Ö‡§¨ ‡§Ø‡•ã ‡§≤‡§æ‡§á‡§®‡§≤‡•á ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§®‡•á‡§õ
            try:
                result = future.result()
                if result['final_verdict'] == 'APPROVED': analysis_results.append(result)
            except Exception as e: logger.error(f"‡§™‡§∞‡§ø‡§∑‡§¶‡•ç‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§Æ‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}", exc_info=True)
    logger.info(f"üß† ‡§™‡§∞‡§ø‡§∑‡§¶‡•ç‡§ï‡•ã ‡§¨‡•à‡§†‡§ï ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§≠‡§Ø‡•ã‡•§ {len(analysis_results)}/{len(candidate_coins)} ‡§Ö‡§µ‡§∏‡§∞‡§π‡§∞‡•Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§≠‡§è‡•§"); return analysis_results
